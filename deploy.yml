---
- hosts: VBox
  become: yes

  tasks:
    - name: Install aptitude using apt
      apt: name=aptitude state=latest update_cache=yes force_apt_get=yes

    - name: Install required system packages
      apt: name={{ item }} state=latest update_cache=yes
      loop: [ 'apt-transport-https', 'ca-certificates', 'curl', 'software-properties-common', 'python3-pip', 'virtualenv', 'python3-setuptools' ]

    - name: Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker Repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu bionic stable
        state: present

    - name: Update apt and install docker-ce
      apt: update_cache=yes name=docker-ce state=latest

    - name: Update apt and install docker-ce-cli
      apt: update_cache=yes name=docker-ce-cli state=latest

    - name: Install Docker Module for Python
      pip:
        name: docker

#    - name: Check docker-compose version
#      command: docker-compose --version
#      register: docker_compose_current_version
#      changed_when: false
#      failed_when: false
#
#    - name: Delete existing docker-compose version if it's different
#      file:
#        path: /usr/local/bin/docker-compose
#        state: absent
#      when: >
#            docker_compose_current_version.stdout is defined
#            and docker_compose_version not in docker_compose_current_version.stdout

#    - name: Install docker-compose
#      get_url:
#        url: https://github.com/docker/compose/releases/download/1.27.4/docker-compose-Linux-x86_64
#        dest: /usr/local/bin/docker-compose
#        mode: 0755

# Docker Swarm Cluster

- name: Init Swarm Master
  hosts: Swarm_cluster_leader
  become: yes
  #gather_facts: False
  tasks:
    - name: Swarm Init
      command: docker swarm init --advertise-addr {{ inventory_hostname }}

    - name: Manager Token
      command: docker swarm join-token manager -q
      register: manager_token

    - name: Show Manager Token
      debug: var=manager_token.stdout

    - name: Get Worker Token
      command: docker swarm join-token worker -q
      register: worker_token

    - name: Show Worker Token
      debug: var=worker_token.stdout

- name: Join Swarm Cluster + managers
  hosts: Swarm_cluster_manager
  become: yes
  vars:
    token_m: "{{ hostvars[groups['Swarm_cluster_leader'][0]]['manager_token']['stdout'] }}"
    manager: "{{ hostvars[groups['Swarm_cluster_leader'][0]]['inventory_hostname'] }}"

  tasks:
    - name: Join Swarm Cluster as a Manager
      command: docker swarm join --token {{ token_m }} {{ manager }}:2377
      register: manager

    - name: Show Results
      debug: var=manager.stdout

    - name: Show Errors
      debug: var=manager.stderr

- name: Join Swarm Cluster + workers
  hosts: Swarm_cluster_workers
  become: yes
  vars:
    token_w: "{{ hostvars[groups['Swarm_cluster_leader'][0]]['worker_token']['stdout'] }}"
    worker: "{{ hostvars[groups['Swarm_cluster_leader'][0]]['inventory_hostname'] }}"
  tasks:
    - name: Join Swarm Cluster as a Worker
      command: docker swarm join --token {{ token_w }} {{ worker }}:2377
      register: worker

    - name: Show Results
      debug: var=worker.stdout

    - name: Show Errors
      debug: var=worker.stderr